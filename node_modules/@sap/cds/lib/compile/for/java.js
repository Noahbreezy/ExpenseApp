// The only entry point to produce CSNs consumed by the Java Runtime

const cds = require ('../../index')

// TODO: compiler functions to clarify - publish as individual API functions or
// have a compiler API function for.java?
function _4java (csn,o) {
  const compile = require ('../cdsc');
  const { addTenantFields } = require ('@sap/cds-compiler/lib/transform/addTenantFields');
  const _4draft = require ('@sap/cds-compiler/lib/transform/draft/odata');
  const dsn = JSON.parse (JSON.stringify (csn)) // REVISIT: workaround for bad test setup
  o = compile._options.for.odata(o); // get compiler options, see compile.for.odata
  if (o.tenantDiscriminator) addTenantFields (dsn, o);
  return _4draft (dsn, o);
}

module.exports = function cds_compile_for_java (csn,o) {
  if ('_4java' in csn) return csn._4java
  // cds.minify (csn) ?
  const dsn = (!cds.env.features._ucsn_) ? cds.compile.for.odata (csn,o||{}) : _4java (csn,o||{});
  if (dsn.definitions) for (let [name,d] of Object.entries(dsn.definitions)) {
    // Add @cds.external to external services
    if (d.kind === 'service' && name in cds.requires) d['@cds.external'] = true
    // Add parsed ._where clause to @restrict annotations
    const rr = d['@restrict']
    if (rr) for (let r of rr) if (r.grant && r.where) try {
      r._where = JSON.stringify (cds.parse.xpr(r.where))
    } catch(e){/* ignored */}
  }
  Object.defineProperty (csn, '_4java', {value:dsn})
  Object.defineProperty (dsn, '_4java', {value:dsn})
  return dsn
}
